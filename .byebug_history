continue
@articles.last.posted_at.class
@articles.last.posted_at
@articles.last
continue
categories_form.errors[:categories].present?
categories_form.errors[:categories].blank?
categories_form.errors[:categories].true?
categories_form.errors[:categories]
continue
categories_form.errors[:categories]
categories_form.errors
continue
exit
applicable_existing_categories.select{|k,v| v == "true"}.length
applicable_existing_categories.select{|k,v| v == "true"}
applicable_existing_categories.map{|k,v| v == "true"}.include?(true)
applicable_existing_categories.map{|k,v| v == "false"}.include?(true)
applicable_existing_categories.map{|k,v| v == "false"}.includes?(true)
applicable_existing_categories.map{|k,v| v == "false"}.include(true)
applicable_existing_categories.map{|k,v| v == "false"}.length
applicable_existing_categories.map{|k,v| v == "false"}
applicable_existing_categories.map{|k,v| v == "true"}
applicable_existing_categories
exit
continue
@this_item_i18n_name
continue
@this_item_i18n_name
continue
@this_item_i18n_name
continue
title
continue
title
author
continue
@article.errors.messages[:author_name]
@article.errors.messages
@article.errors.full_messages
@article.errors.full_messages.messages[:author_name]
@article.errors.full_messages[:author_name]
@article.errors.full_messages
@article.errors
@article
article
f
f.error_messages
f.errors
f.
continue
valid?
exit
valid?
continue
valid?
continue
params[:author_name.to_s]
self.author_name
self.errors
self.valid?
article.body
article
valid?
exit
params[:body]
params.slice([:body, :title, :teaser, :posted_from_location, :posted_at, :status].map(&:to_s))
body
valid?
exit
valid?
body
article.attributes = params.slice('body', 'title', 'teaser', 'posted_from_location', 'posted_at', 'status')
params['body']
params[:body]
params.body
params.slice("body")
params.slice(:body)
params.slide(:body)
params
article
article.
article.body
body
article.attributes = params.slice(:body, :title, :teaser, :posted_from_location, :posted_at, :status)
        :status)
        :posted_at,
        :posted_from_location,
        :teaser,
        :title,
        :body,
    article.attributes = params.slice(
        :status)
        :posted_at,
        :posted_from_location,
        :teaser,
        :title,
        :body,
      slice(
    article.attributes = params.
body
continue
@article
a.full_name.exists?
self.full_name.exists?
full_name.blank?
full_name.present?
full_name.exist?
full_name.exists?
step
@author
exit
params
continue
site_editorials.select{|se| se.translation.status == "published" }
      select{|se| se.translation.status == "published" }site_editorials.
    site_editorials.
site_editorials
site_editorial
continue
site_editorial.translation.body
site_editorial.translation
site_editorial
continue
create_new_author.present? && @article.author.full_name != create_new_author
@article.author_id.to_s == author_id && (@article.author.full_name == create_new_author || create_new_author.blank?)
continue
@article.author_id.to_s == author_id && (@article.author.full_name == create_new_author || create_new_author.blank?)
continue
@article.author_id.to_s == author_id && (@article.author.full_name == create_new_author || create_new_author.blank?)
continue
@article.author_id.to_s == author_id
@article.author_id.to_s
author_id
@article.author.full_name == create_new_author
continue
@article.author.full_name == create_new_author
@article.author_id.to_s == author_id
author_id 
@article.author_id.to_s
@article.author_id
@article
exit
item.class.name
item.class?name
item.classname
item.class
continue
aktion.categorizings[0].category.name
aktion.categories[0].name
continue
aktion.categories[0].name
aktion.categorizings[0].category.name
continue
aktion.categorizings[0].category.name
aktion.categories[0].name
continue
aktion.categories[0].name
aktion.categorizings[0].category.name
continue
aktion.categorizings[0].category.name
aktion.categories[0].name
continue
aktion.categories[0].name
aktion.categorizings[0].category.name
continue
aktion.categorizings[0].category.name
aktion.categorizings[0].categroy.name
aktion.categories[0].name
aktion.categories[0]
continue
aktion.categorizings
aktion.categories
continue
exit
Portrait.destroy
exit
continue
external_linkings[:existing_external_linkings]
external_linkings
external_linkings[:existing_external_links]
external_linkings["existing_external_links"]
continue
params[:external_linkings]
external_linkings
continue
id
@id
picture_title
continue
new_md[:change_everywhere]
new_md[:file].present?
new_md && new_md[:file].present?
picture_title
continue
create_new_author.blank?
continue
create_new_author.blank?
continue
@article.author_id.to_s != author_id
continue
author_id
@article.author_id.to_s
create_new_author
@article.author.full_name
@article.author.full_name == create_new_author
continue
editorial
continue
editorial.class
editorial
continue
teaser
exit
el.external_link
el
el = ExternalLinking.destroy(18)
ExternalLinking.destroy(19)
destroyed_el = ExternalLinking.find(19)
ExternalLinking.destroy(id: 19)
ExternalLinking.last
marked_for_deletion["existing_external_links"].each { |el| p el[0]}
marked_for_deletion["existing_external_links"].each { |el| p el}
marked_for_deletion["existing_external_links"].each do { |el| p el}
marked_for_deletion["existing_external_links"]
marked_for_deletion
external_link_marked_for_deletion
continue
categories
category
article
@article
article
aktion
article
@article
exit
title
name
params
Country.includes(:media_containers, :author).find(1)
exit
{id: params[:id]}.merge(params[:country]).merge({ external_links: params[:external_links] })
{id: params[:id]}.merge(params[:country])
{id: params[:id]}.merge(params[:country]).merge()
{ {id: params[:id]}.merge(params[:country]) }
{{id: params[:id]}.merge(params[:country]), external_links: params[:external_links]}
{id: params[:id]}.merge(params[:country])
exit
params[:country][:editorial]
params[:country][:title]
params[:country][:name]
params[:external_links]
params[:country]
params[:external_links]
params[:country]
