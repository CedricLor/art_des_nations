continue
@article.author
@article
continue
@article.author_name
@article.author
@article
continue
@article.author
@article
continue
@aktion.existing_links
continue
picturizing
picutizing
picturizing = item.picturizings.size > 0 && item.picturizings.select { |p| p.for_card == "true" }
continue
self.model_name.name
self.model_name
self.model
self.class.name
self.class
continue
@site_editorial.errors
continue
@site_editorial.errors
continue
@site_editorial.errors
continue
@site_editorial.errors
continue
@site_editorial.errors
s.errors
continue
self.status != "featured"
site_editorial.status != "featured"
self.translation.status_was == "featured"
site_editorial.translation.status_was == "featured"
SiteEditorial.find(1).status
SiteEditorial.find(1)
self.status
self
site_editorial
continue
next
self.status
self
status
continue
site_editorial.translation.status_was == "featured" && site_editorial.status != "featured"
site_editorial.status != "featured"
site_editorial.translation.status_was == "featured"
continue
site_editorial.translation.status_was
site_editorial
continue
translation.status
translation
site_editorial
continue
@site_editorial.errors
@site_editorial
continue
body_form.errors
continue
@site_editorial.errors
@site_editorial
continue
@site_editorial.errors
@site_editorial
errors
continue
self.new_category_name
self.main_category_id
continue
self.main_category_id
continue
respond_to?(:title)
respond_to?(:name)
self.name
self.respond_to?(:name)
self.respond_to?(:title)
self.respond_to(:title)
self
continue
@main_model
calling_form
self
continue
next
self
sel
continue
pict.id
pict
pict.id.to_s
parent.for_card.match(/existing_md_|new_md_(\d+)/)
parent.for_card
parent
continue
pict
parent.for_card
continue
parent.for_card
parent
continue
value["for_carousel"] == "true"
value["for_carousel"]
value
continue
continu
continue
parent.new_md
parent
continue
parent
continue
parent.for_card.match(/existing_md_|new_md_(\d+)/)
parent.for_card.match(/existing_md_|new_md_/)
parent.for_card.match(/new_md_/)
parent.for_card.match(/new_md_/
parent.for_card
continue
@portrait.new_md
@portrait
continue
new_md[0]
new_md
new_md.key
continue
@article.new_md
@article.author_name
@article.body
@article.tbody
@article.teaser
@article.title
@article
continue
@article.new_md
@article
continue
@article.new_md
@article
continue
author_name
continue
md_to_update
title
id
continue
@md_to_update
md_to_update
title
:title
@title
@id
id
attributes
exit
continue
@author
continue
@main_model.picturizings.map{ |p| {p.id.to_s => p.for_carousel} }.reduce(Hash.new, :merge)
params[:md_for_carousel]
continue
b.author.full_name
b.author
b = Article.new
a.author.full_name
a.author
a =  ArticleCreationForm.new
a
a =  ArticleCreationForm.new
a
a =  ArticleCreationForm.new
a = = ArticleCreationForm.new
a.categorizings.first.category_id.to_s
a.categorizings.map(&:category_id)
a = Article.new
3.times { puts "I am a hero" }
3.times {|i| puts i}
@article.new_md
continue
@article.md_to_update
@article.new_md
continue
params["article"]["md_for_destruction"]
continue
params["article"]["md_for_destruction"]
params["article"]["for_card"]
params["article"]
params["for_card"]
params[:for_card]
params[:md_for_destruction]
params
@article.md_for_destruction
continue
@article.md_for_destruction
continue
@main_model.picturizings.map{ |p| {p.id.to_s => p.media_container.title} }.reduce Hash.new, :merge
continue
@article.picturizings
@article.md_to_update
continue
a
a.merge(@main_model.picturizings.map{ |p| {p.media_container_id.to_s => p.media_container.title} }.first
@main_model.picturizings.map{ |p| {p.media_container_id.to_s => p.media_container.title} }.first
@main_model.picturizings.map{ |p| {p.media_container_id.to_s => p.media_container.title} }.first.key
@main_model.picturizings.map{ |p| {p.media_container_id.to_s => p.media_container.title} }.first[0]
@main_model.picturizings.map{ |p| {p.media_container_id.to_s => p.media_container.title} }.first
@main_model.picturizings.map{ |p| {p.media_container_id.to_s => p.media_container.title} }
@main_model.picturizings.size
@main_model.picturizings
@main_model
@main_model.picturizings.map{ |p| {p.media_container_id.to_s => p.media_container.title} }.reduce Hash.new, :merge
continue
@article.picturizings.last.media_container.title
@article.picturizings.last.media_container.translation
@article.picturizings.last.media_container
@article.picturizings
@article.md_to_update
@article
continue
self.teaser
continue
self.teaser
@main_model.categorizings.first.category_id.to_s
@main_model.categorizings.first.category_id
@main_model.categorizings.first.id
@main_model.categorizings.first
self.main_category_id
categories_ids.map { |c| currently_applicable_categories_ids.include?(c) ? { c.to_s => "true" } : { c.to_s => "false" } }.reduce Hash.new, :merge
categories_ids.map { |c| currently_applicable_categories_ids.include?(c) ? { c.to_s => "true" } : { c.to_s => "false" } }
categories_ids = Category.all.map(&:id)
currently_applicable_categories_ids = @main_model.categorizings.map(&:category_id)
currently_applicable_categories_ids = @main_model.categorizings.map(&:id)
[1,2,3].include?(2)
[1,2,3].includes?(2)
Category.all.map(&:id).reduce Hash.new, :merge
@main_model.categorizings.map{ |c| c.category.id.to_s}
self.applicable_existing_categories
@main_model.picturizings.select{ |p| p.for_card == "true" }.last
@main_model.picturizings.select{ |p| p.for_card == "true" }
@main_model.picturizings.select{ |p| p.for_card }
self.for_card
self.author_name
self.full_name
full_name
@main_model.author.full_name
@main_model.picturizings.map{ |p| {p.id.to_s => p.for_carousel} }.reduce Hash.new, :merge
@main_model.picturizings.map{ |p| {p.id => p.for_carousel} }.reduce Hash.new, :merge
@main_model.picturizings.map{ |p| {p.id => p.for_carousel} }
@main_model.picturizings.map(&:id)
@main_model.picturizings.map(:&id)
@main_model.picturizings
@main_model
