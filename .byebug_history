continue
single_views
continue
flash.notice
flash.ntocie
flash
flash.each { |type| p type  }
flash.each { |type| p.type  }
flash.select { |type| %i(alert notice).include?(type) }
flash
continue
flash
continue
yield
content_for?(:content)
:content
continue
f
f.has_many
continue
locale
continue
locale
continue
picturizable_type
picturizings
continue
items_with_title
medias_by_media_container_ids
media_container_ids_by_element_id
continue
@actions_for_home_page[3]
@actions_for_home_page[2]
@actions_for_home_page[1]
continue
@actions_for_home_page
continue
portrait
continue
locale
continue
locale
continue
locale
continue
@country.title
@country.name
next
continue
I18n.locale
next
params
I18n.locale
continue
I18n.locale
continue
I18n.locale
continue
locale_action_translations
next
locale_article_translations
next
category_with_articles_and_actions.actions
category_with_articles_and_actions.articles
category_with_articles_and_actions
continue
Article::Translation.where(locale: "en", article_id: category_with_articles_and_actions.articles.map { |a| a.id })conti
Article::Translation.where(locale: "en", article_id: category_with_articles_and_actions.articles.map { |a| a.id })
Article::Translation.where(locale: "en", article_id: [2, 4, 17, 10, 12, 16, 7, 13, 6])
Article::Translation.where(article_id: [2, 4, 17, 10, 12, 16, 7, 13, 6])
category_with_articles_and_actions.articles.map { |a| a.id }
locale
Article::Translation.where("locale = ? AND article_id = ?", locale || I18n.default_locale,category_with_articles_and_actions.articles.map { |a| a.id })
continue
Article::Translation.where(locale: locale || I18n.default_locale and article_id: category_with_articles_and_actions.articles.map { |a| a.id })
Article::Translation.where(locale: locale).find(category_with_articles_and_actions.articles.map { |a| a.id })
Article::Translation.where(locale: locale)
locale
continue
locale
category_with_articles_and_actions.articles
category_with_articles_and_actions
continue
step
@category.articles
@category
continue
category_with_articles_and_actions
Article::Translation.where(locale: locale)
next
locale
continue
next
locale
continue
I18n.locale
continue
next
step
continue
available_locale
I18n.available_locales
available_locale != I18n.locale
continue
available_locale != I18n.locale
continue
available_locale != I18n.locale
available_locale
continue
available_locale
next
available_locale
I18n.available_locales
continue
article_picture
continue
ArticlePicture.find(article_picture.fetch('id'))
continue
article_picture['article_id']
article_picture.fetch('article_id')
article_picture
continue
next
article_picture['media_container_id']
continue
article_picture
continue
next
continue
@article_pictures_to_update
continue
@article_pictures_to_create
@article_pictures_to_create.empty?
continue
@article_update_form.article
@article_update_form
next
self
from_mod
const_name
next
step
article_pict.fetch('stored_file_id') == media_file.keys[0].to_i
article_pict.has_key?('stored_file_id')
article_pict
step
media_file
step
article_pictures
media_files
continue
params
continue
media_containers_data
media_container_data
continue
media_container_data
continue
media_container_data
continue
media_files
stored_file
@article_pictures_to_update_without_media_file
@article_pictures_to_update_with_media_file
@article_pictures_to_create.empty?
@article_pictures_to_update
continue
@article_pictures_to_create
@article_pictures_to_update_with_media_file
@article_pictures_to_update_without_media_file
continue
next
continue
next
article_pictures
@article_pictures_to_update_without_media_file
next
article_picture
step
@article_pictures_to_update_without_media_file
step
@article_pictures_to_update_without_media_file
step
@article_pictures_to_update_without_media_file
next
@article_pictures_to_update_without_media_file
article_picture
next
article_picture
step
article_picture
step
@article_pictures_to_update
step
@existing_article_picture_ids.include?(article_picture["id"])
next
article_picture
continue
article_picture
continue
a = article_pictures.select {|article_picture| article_picture unless article_picture.has_key?("stored_file_id")}
a
a = article_pictures.map {|article_picture| article_picture unless article_picture.has_key?("stored_file_id")}
a = []
media_files
stored_files
stored_file_id
article_pictures.each
continue
art_pics_destroy_obj.article_picture_ids
continue
@ancillaryItemsToDestroy
step
art_pics_destroy_obj.article_pictures_ids
art_pics_destroy_obj.destroyed_media_container_ids
article_pictures
art_pics_destroy_obj.@article_pictures
art_pics_destroy_obj.article_pictures
@article_picture_ids
art_pics_destroy_obj.@article_picture_ids
art_pics_destroy_obj[@article_picture_ids]
art_pics_destroy_obj.article_picture_ids
art_pics_destroy_obj
continue
stepback
back
prior
previous
@ancillaryITemsToDestroy
continue
media_files
continue
media_files[2]
media_files[3]
media_files[1]
media_files[0]
media_files
continue
options
continue
step
go
gone
goon
interrupt
interupt
options
continue
next
continue
article_picture
next
continue
article_picture
next
continue
