continue
site_editorials.select{|se| se.translation.status == "published" }
      select{|se| se.translation.status == "published" }site_editorials.
    site_editorials.
site_editorials
site_editorial
continue
site_editorial.translation.body
site_editorial.translation
site_editorial
continue
create_new_author.present? && @article.author.full_name != create_new_author
@article.author_id.to_s == author_id && (@article.author.full_name == create_new_author || create_new_author.blank?)
continue
@article.author_id.to_s == author_id && (@article.author.full_name == create_new_author || create_new_author.blank?)
continue
@article.author_id.to_s == author_id && (@article.author.full_name == create_new_author || create_new_author.blank?)
continue
@article.author_id.to_s == author_id
@article.author_id.to_s
author_id
@article.author.full_name == create_new_author
continue
@article.author.full_name == create_new_author
@article.author_id.to_s == author_id
author_id 
@article.author_id.to_s
@article.author_id
@article
exit
item.class.name
item.class?name
item.classname
item.class
continue
aktion.categorizings[0].category.name
aktion.categories[0].name
continue
aktion.categories[0].name
aktion.categorizings[0].category.name
continue
aktion.categorizings[0].category.name
aktion.categories[0].name
continue
aktion.categories[0].name
aktion.categorizings[0].category.name
continue
aktion.categorizings[0].category.name
aktion.categories[0].name
continue
aktion.categories[0].name
aktion.categorizings[0].category.name
continue
aktion.categorizings[0].category.name
aktion.categorizings[0].categroy.name
aktion.categories[0].name
aktion.categories[0]
continue
aktion.categorizings
aktion.categories
continue
exit
Portrait.destroy
exit
continue
external_linkings[:existing_external_linkings]
external_linkings
external_linkings[:existing_external_links]
external_linkings["existing_external_links"]
continue
params[:external_linkings]
external_linkings
continue
id
@id
picture_title
continue
new_md[:change_everywhere]
new_md[:file].present?
new_md && new_md[:file].present?
picture_title
continue
create_new_author.blank?
continue
create_new_author.blank?
continue
@article.author_id.to_s != author_id
continue
author_id
@article.author_id.to_s
create_new_author
@article.author.full_name
@article.author.full_name == create_new_author
continue
editorial
continue
editorial.class
editorial
continue
teaser
exit
el.external_link
el
el = ExternalLinking.destroy(18)
ExternalLinking.destroy(19)
destroyed_el = ExternalLinking.find(19)
ExternalLinking.destroy(id: 19)
ExternalLinking.last
marked_for_deletion["existing_external_links"].each { |el| p el[0]}
marked_for_deletion["existing_external_links"].each { |el| p el}
marked_for_deletion["existing_external_links"].each do { |el| p el}
marked_for_deletion["existing_external_links"]
marked_for_deletion
external_link_marked_for_deletion
continue
categories
category
article
@article
article
aktion
article
@article
exit
title
name
params
Country.includes(:media_containers, :author).find(1)
exit
{id: params[:id]}.merge(params[:country]).merge({ external_links: params[:external_links] })
{id: params[:id]}.merge(params[:country])
{id: params[:id]}.merge(params[:country]).merge()
{ {id: params[:id]}.merge(params[:country]) }
{{id: params[:id]}.merge(params[:country]), external_links: params[:external_links]}
{id: params[:id]}.merge(params[:country])
exit
params[:country][:editorial]
params[:country][:title]
params[:country][:name]
params[:external_links]
params[:country]
params[:external_links]
params[:country]
exit
existing_external_links.first[1][:name]
existing_external_links.first[1].name
existing_external_links.first[1]
existing_external_links.first
existing_external_links.first[0].value
existing_external_links.first[0]
existing_external_links.first.key
existing_external_links.first.value
existing_external_links.first
existing_external_links
Object.const_get("#{parent_type}").find(parent_id)
parent_type
parent_id
@parent_id
exit
external_links
@parent_type
@parent_id
parent_type
parent_id
continue
applicable_existing_categories
continue
new_md
picture_title
:applicable_existing_categories
portrait_params
continue
portrait_params
continue
self.applicable_existing_categories
params
new_category_name
main_category_id
applicable_existing_categories
object
self
@portrait
continue
applicable_existing_categories.except!(main_category_id)
main_category_id
applicable_existing_categories
continue
main_category_id.present?
main_category_id == "new_category"
new_category_name
main_category_id
applicable_existing_categories
item_type
item
continue
applicable_existing_categories
type
continue
item
type
continue
type
continue
type
continue
item_type
item
main_category_id
applicable_existing_categories
main_category_id
new_category_name
continue
new_category_name
main_category_id
applicable_existing_categories
item
item_type
continue
item_type
continue
new_category_name
main_category_id
applicable_existing_categories
item
item_type
continue
applicable_existing_categories
continue
cat
chosen_category_ids.include?(kateg.id)
kateg.id
kateg
chosen_category_ids
continue
cat
chosen_category_ids
continue
@categories_for_side_nav.map(&:id)
@categories_for_side_nav
@article.categories.map(&:name)
@article.categories
chosen_category_ids
continue
collection_select(:aktion, :country_id, @countries, :id, :name, {}, {class: "form-control"})
:aktion
continue
@countries
continue
@countries = Country.includes(:translations).all
continue
@countries
continue
@countries
continue
step
@countries = Country.includes(:translations).all
