continue
pics_ids = @article.picturizings.select{|p| md_for_carousel.keys.include?(p.id.to_s)}.map {|p| p.id}
pics_ids = @article.picturizings.select{|p| md_for_carousel.keys.include?(p.media_container_id.to_s)}.map {|p| p.id}
md_for_carousel.keys.include?(p.media_container_id.to_s)}
md_for_carousel.keys
continue
p "coucou" if md_for_carousel
if md_for_carousel {p "coucou"}
if md_for_carousel p "coucou" end
md_for_carousel == true
md_for_carousel.true?
md_for_carousel
continue
md_for_carousel
continue
pict_id
continue
md_for_carousel
continue
next
pict_id
continue
exit
for_card.sub(/existing_card_/, '')
pict_id
continue
exit
for_card.sub(/existing_md_/, '') != for_card
for_card.sub(/existing_md_/, '')
for_card.sub(/existing_card_/, '')
for_card
for_Card
for_card.sub(/existing_card_/, '') != for_card
pict_id
continue
md_to_update
exit
for_card.sub(/existi_md_/, '') != for_card
for_card.sub(/existi_md_/, '')
for_card.sub(/existing_md_/, '')
for_card.sub(/existing_md_/)
for_card.match(/existing_md_/)
for_card.match(/existing_md/)
for_card
md_to_update
continue
next
picturizing_for_card.id
picturizing_for_card
next
continue
picturizing_for_card[0].id
picturizing_for_card[0].picturizable_id
picturizing_for_card.picturizable_id
picturizing_for_card['id']
picturizing_for_card[id]
picturizing_for_card
picturizing_for_card.id
picturizing_for_card = @article.picturizings.select{|p| p.media_container_id == md_for_card.keys[0].to_i}
Picturizing::Translation.where(picturizing_id: @article.picturizings.ids).update_all(for_card: "false")
continue
next
continue
next
pics_ids
next
step
exit
ps_ids = @article.picturizings.select{|p| md_for_carousel.keys.include?(p.media_container_id.to_s)}.map {|p| p.id}
ps
ps = @article.picturizings.select{|p| md_for_carousel.keys.include?(p.media_container_id.to_s)}
@article.picturizings.select{|p| md_for_carousel.keys.include?(p.media_container_id.to_s)}
exit
md_for_carousel
md_for_carousel.keys
continue
@media_containers
continue
MediaContainer.find([1,2])
MediaContainer.last.media(:for_carousel)
MediaContainer.last.media
MediaContainer.last
@media_containers.each {|md| p md.media(:styles)}
@media_containers.each {|md| p md.media(:default_url)}
@media_containers.each {|md| p md.media(:url)}
@media_containers.each {|md| p md.media.url}
@media_containers.each {|md| p md.media(:name)}
@media_containers.each {|md| p md.media[:name]}
@media_containers.each {|md| p md.media[@name]}
@media_containers.each {|md| p md.media(:for_slider)}
@media_containers.each {|md| p md.media}
@media_containers.each {|md| p md.title}
continue
MediaContainer.find(1)
MediaContainer.find(15)
MediaContainer.find(14)
@media_containers.each {|md| p md.title}
@media_containers
continue
md_for_carousel[picturizing.media_container_id.to_s]
picturizing.update(for_carousel: md_for_carousel[picturizing.media_container_id.to_s])
md_for_carousel.keys.include?(picturizing.media_container_id.to_s)
md_for_carousel
picturizing
picturing
step
md_for_carousel
continue
md_for_carousel["5"]
md_for_carousel["5]
md_for_carousel.keys
md_for_carousel.key
md_for_carousel
@article.picturizings.each { |picturizing| p md_for_carousel[] }
continue
next
@article.picturizings.each { |picturizing| p "Yyyyyaaahoooo" if md_for_carousel.keys.include?(picturizing.media_container_id.to_s) }
@article.picturizings.each { |picturizing| md_for_carousel.keys.include?(picturizing.media_container_id.to_s) }
@article.picturizings
continue
p.valid?
p = new_md.picturizings.build(picturizable_id: @id, picturizable_type: "Article", for_carousel: md[1]["for_carousel"] || "true", for_card: md[1]["for_card"] || "false")
continue
p.save!
p.save
p.valid?
p
p = new_md.picturizings.build(picturizable_id: @id, picturizable_type: "Article", for_carousel: md[1]["for_carousel"], for_card: md[1]["for_card"])
new_md.picturizings.create(picturizable_id: @id, picturizable_type: "Article", for_carousel: md[1]["for_carousel"], for_card: md[1]["for_card"])
md[1]["for_card"]
md[1]["for_carousel"]
@id
new_md.picturizings
new_md
continue
md_for_destruction
continue
md_for_carousel.keys.include?(3.to_s)
md_for_carousel.keys.include?(3.to_S)
md_for_carousel.keys
md_for_carousel.keys.include?(3)
md_for_destruction
md_for_carousel.include?(3)
md_for_carousel
continue
create_new_author
author_id
continue
new_md.each_with_index { |md, i| p md[1]["for_carousel"] }
continue
next
continue
new_md.each { |md|  p md[1]["file"] unless md[1]["file"].nil? }
new_md
new_md.each { |md|  p md[1]["file"] }
new_md.each_with_index { |md, i|  p md[1] }
new_md.each_with_index { |md, i|  p md[i] }
new_md.each_with_index { |md, i|  p md["#{i}"] }
new_md.is_a?(Hash)
new_md.is_hash?
new_md.each_with_index { |md, i|  p md[i] }
new_md.each_with_index { |md, i|  p md["#{i}"] }
new_md.each_with_index { |md|  p md }
new_md.each_with_index do |md, i| { p md }
new_md.each_with_index do |md, i|
new_md
article
exit
new_md["1"]["file"].class
new_md["1"]["file"]
new_md["1"]
new_md
continue
@additional_media_containers
continue
@additional_media_containers
exit
additional_media_containers
@article.additional_media_containers
@article
continue
next
MediaContainer.all.size
MediaContainer.all
MediaContainers.all
MediaContainer.find(1)
Article.find(19).media_containers.size
Article.find(19).media_containers
Article.find(19).picturizings.size
Article.find(19).picturizings
Article.find(19)
next
md_to_update["2"]
md_to_update["2]
md_to_update
continue
exit
continue
md_to_update
continue
next
step
md_to_update
md_to_updat
title
body
@id
id
continue
title
:title
:id
@id
id
continue
params["article"]["posted_at"].class
params["article"]["posted_at"]
params["article"]
params["utf8"]
params.utf8
params
params["article”]
params["article”]["posted_at"]
params["posted_at"]
params[:posted_at]
params.posted_at
params
continue
step
article[:posted_at] = Date.new article["posted_at(1i)"].to_i, article["posted_at(2i)"].to_i, article["posted_at(3i)"].to_i
step
article[:posted_at] = Date.new article["posted_at(1i)"].to_i, article["posted_at(2i)"].to_i, article["posted_at(3i)"].to_i
Date.new article["posted_at(1i)"].to_i, article["posted_at(2i)"].to_i, article["posted_at(3i)"].to_i
article[:posted_at]
article = params[:article]
params[:article]["posted_at(1i)"]
params[:article]
params[:article
article
step
continue
step
continue
step
quit
step
continue
const_name
step
exit
step
exit
ArticleUpdateForm
exit
const_name
step
