continue
target.crop_w.to_i
target.crop_w
continue
 !crop_x.blank? && !crop_y.blank? && !crop_h.blank? && !crop_w.blank?
!crop_x.blank?
exit
continue
item.class.name.underscore
item.class.name
item.class.name.downcase
exit
contine
continue
portrait.title
continue
portrait.title
continue
portrait.title
continue
portrait.title
portrait.name
portrait
exit
(portrait.status = "published") == true
portrait.valid?
portrait.status = "featured"
portrait.valid?
portrait.status
portrait.status = "published"
portrait.status
portrait
exit
@languages_array
locale
languages
continue
params[:article]["posted_at(1i)"]
params[:article][:posted_at]
params[:article]
params
exit
a.valid?
a = ArticleUpdateForm.new(id: article.id)
continue
a.valid?
a = ArticleUpdateForm.new(id: article.id)
ArticleUpdateForm.new(id: article.id)
continue
article.valid?
continue
article.valid?
continue
article.valid?
continue
article.valid?
continue
article.valid?
continue
article.valid?
continue
article.valid?
continue
article.valid?
continue
article.valid?
continue
article.valid?
continue
article.valid?
continue
article.valid?
article
continue
params
continue
params
exit
params
continue
params.merge({:locale => "en", "action" => "new"})
params.merge({:locale => "en"})
params.merge({:locale => "en")
params
continue
locale.keys
locale
continue
I18n.locale
I18n.language
continue
pict
continue
pict.id.to_s
pict.for_card
parent.for_card.match(/(existing_md_|new_md_)(\d+)/)[2]
parent.for_card.match(/(existing_md_|new_md_)(\d+)/)[1]
m = parent.for_card.match(/(existing_md_|new_md_)(\d+)/)
parent.for_card.match(/(existing_md_|new_md_)(\d+)/)
pict.respond_to?(:for_card) && pict.for_card == "true"
pict.for_card
pict
parent.for_card.match(/existing_md_|new_md_(\d+)/)
parent.for_card
continue
pict
parent.for_card
parent
continue
pict
parent
continue
mark_as_checked_if_pict_is_for_card(parent, pict)
continue
mark_as_checked_if_pict_is_for_card(parent, pict)
continue
pict
parent
mark_as_checked_if_pict_is_for_card(parent, pict)
continue
self.for_card
continue
"existing_md_".concat(picture_for_card.id.to_s)
picture_for_card.id
"existing_md_".concat(picture_for_card.id)
picture_for_card.id
picture_for_card
continue
self.for_card
continue
@og_title
continue
@article.article
@article
continue
@article(@main_model)
@article[@main_model]
@article.article
@article
continue
@item.main_model
@item
continue
@item_i18n_name
@item_i18_name
@parent_item.class.name
@item_i18n_name
continue
@parent_item.class.name
@item_i18n_name
continue
@parent_item.class.name
continue
@item_i18n_name
continue
 picture_update["crop_x"]
continue
picture_update
continue
md_to_update["#{pict.id}"]
continue
md_to_update["#{pict.id}"]
continue
exit
continue
MediaContainer.find(5).title
MediaContainer.find(5)
continue
md_to_update["#{pict.id}"]["title"]
continue
md_to_update["#{pict.id}"]["title"]
md_to_update["#{pict.id}"]
exit
md_to_update["#{pict.id}"]["title"]
md_to_update["#{pict.id}"]
exit
md_to_update["#{pict.id}"]
md_to_update["#{pict.id}"]["title"]
continue
content_for :type_of_picture_change_block
:type_of_picture_change_block
continue
@parent_item.model_name.name"Aktion" || "Article")
@parent_item.model_name.name
continue
@parent_item.model_name.name == ("Aktion" || "Article")
@parent_item.model_name.name == "Aktion" || "Article"
@parent_item.model_name.name
@parent_item.model_name
@parent_item
continue
Rails.application.routes.recognize_path(request.referer)[:action]
Rails.application.routes.recognize_path(request.referer)
continue
id
@id
self.class.name
Linking.for(self.class.name, @id)
continue
collections
exit
continue
element.caller_type
element.caller_id
element.target_element
element.respond_to?("target_element")
element
continue
exit
params[:to_linkable_id]
@redirect_url
continue
@redirect_url
exit
@redirect_url
exit
redirect_url
exit
edit_article_url(params[:article_id]) if params[:article_id]
redirect_url
exit
edit_article_url(params[:article_id])
params[:aktion_id]
params[:article_id]
params
continue
elemnt.get_linking_id
element
continue
collection.first.get_linking_id
continue
@article.article.existing_links.first.get_linking_id
@article.article.existing_links.first
@article.article.existing_links
continue
processed_to_linkables.first.get_linking_id
processed_to_linkables.first
processed_to_linkables
continue
self[:"#{toto}"]
toto = "id"
self[:"#{'id'}"]
self[:"#{id}"]
self[:id]
self
a.first
a = to_links.map { |l| (l.to_linkable.set_linking_id = l.id) }
a.first.access_linking_id.linking_id
a.first.access_linking_id
a = to_links.map { |l| (l.to_linkable.set_linking_id = l.id && l.to_linkable) }
a.first.access_linking_id
a.first
a = to_links.map { |l| l.to_linkable }
continue
a.first.access_linking_id
a = to_links.map { |l| l.to_linkable }
