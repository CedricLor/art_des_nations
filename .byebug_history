continue
 picture_update["crop_x"]
continue
picture_update
continue
md_to_update["#{pict.id}"]
continue
md_to_update["#{pict.id}"]
continue
exit
continue
MediaContainer.find(5).title
MediaContainer.find(5)
continue
md_to_update["#{pict.id}"]["title"]
continue
md_to_update["#{pict.id}"]["title"]
md_to_update["#{pict.id}"]
exit
md_to_update["#{pict.id}"]["title"]
md_to_update["#{pict.id}"]
exit
md_to_update["#{pict.id}"]
md_to_update["#{pict.id}"]["title"]
continue
content_for :type_of_picture_change_block
:type_of_picture_change_block
continue
@parent_item.model_name.name"Aktion" || "Article")
@parent_item.model_name.name
continue
@parent_item.model_name.name == ("Aktion" || "Article")
@parent_item.model_name.name == "Aktion" || "Article"
@parent_item.model_name.name
@parent_item.model_name
@parent_item
continue
Rails.application.routes.recognize_path(request.referer)[:action]
Rails.application.routes.recognize_path(request.referer)
continue
id
@id
self.class.name
Linking.for(self.class.name, @id)
continue
collections
exit
continue
element.caller_type
element.caller_id
element.target_element
element.respond_to?("target_element")
element
continue
exit
params[:to_linkable_id]
@redirect_url
continue
@redirect_url
exit
@redirect_url
exit
redirect_url
exit
edit_article_url(params[:article_id]) if params[:article_id]
redirect_url
exit
edit_article_url(params[:article_id])
params[:aktion_id]
params[:article_id]
params
continue
elemnt.get_linking_id
element
continue
collection.first.get_linking_id
continue
@article.article.existing_links.first.get_linking_id
@article.article.existing_links.first
@article.article.existing_links
continue
processed_to_linkables.first.get_linking_id
processed_to_linkables.first
processed_to_linkables
continue
self[:"#{toto}"]
toto = "id"
self[:"#{'id'}"]
self[:"#{id}"]
self[:id]
self
a.first
a = to_links.map { |l| (l.to_linkable.set_linking_id = l.id) }
a.first.access_linking_id.linking_id
a.first.access_linking_id
a = to_links.map { |l| (l.to_linkable.set_linking_id = l.id && l.to_linkable) }
a.first.access_linking_id
a.first
a = to_links.map { |l| l.to_linkable }
continue
a.first.access_linking_id
a = to_links.map { |l| l.to_linkable }
a = to_links.map { |l| l.to_linkable.access_linking_id }
a = to_links.map { |l| (l.to_linkable.set_linking_id = l.id) }
a.first.access_linking_id
a.first
a = to_links.map { |l| (l.to_linkable.set_linking_id = l.id && l.to_linkable) }
to_links.map { |l| (l.to_linkable.set_linking_id = l.id && l.to_linkable) }
a.access_linking_id
a.set_linking_id = 1
a = to_links.first.to_linkable
to_links.first.to_linkable
to_links.first
to_links
a.first
a.first.linking_id
a.first.access_linking_id
a = to_links.map { |l| (l.to_linkable.set_linking_id = l.id && l.to_linkable) }
continue
a.first.access_linking_id
a.first.linking_id
a = to_links.map { |l| (l.to_linkable.linking_id = l.id && l.to_linkable) }
continue
a.first.linking_id
a.first.linking_id = 2
a.first.linking_id
a = to_links.map { |l| (l.to_linkable.linking_id = l.id && l.to_linkable) }
a.first.linking_id
a = to_links.map { |l| (l.to_linkable.linking_id = l.id && l.to_linkable) }
exit
a.first.linking_id
a = to_links.map { |l| (l.to_linkable.linking_id = l.id && l.to_linkable) }
self.linking_id
self
a.first.linking_id
a = to_links.map { |l| (l.to_linkable.linking_id = l.id && l.to_linkable) }
exit
a.first.linking_id
a = to_links.map { |l| (l.to_linkable.linking_id = l.id && l.to_linkable) }
exit
a.first.linking_id
a = to_links.map { |l| (l.to_linkable.linking_id = l.id && l.to_linkable) }
to_links.map { |l| (l.to_linkable.linking_id = l.id && l.to_linkable) }
to_links.map { |l| (l.to_linkable) }
to_links.map { |l| l.to_linkable.linking_id = l.id then l.to_linkable }
to_links.map { |l| l.to_linkable.linking_id = l.id && l.to_linkable }
to_links.map { |l| l.to_linkable.linking_id = l.id && return l.to_linkable }
to_links.map { |l| l.to_linkable.linking_id = l.id }
to_links.map { |l| l.to_linkable.linking_id = l.id && l.to_linkable }
to_links.map { |l| l.to_linkable }
to_links.map { |l| l.to_linkable.attributes }
to_links.map { |l| l.to_linkable.attributes=(linking_id: l.id) }
to_links.map { |l| l.to_linkable.assign_attributes(linking_id: l.id) }
to_links.map { |l| l.to_linkable.assign_attributes(linking_id: l.id} }
to_links.map do |l| Proc.new do |l| l.to_linkable.linking_id = l.id end; l end
to_links.map do |l| Proc.new do |l| l.to_linkable.linking_id = l.id end, l end
to_links.map do |l| Proc.new do |l| l.to_linkable.linking_id = l.id end l end
to_links.map do |l| Proc.new do |l| l.to_linkable.linking_id = l.id end end
      end
        l.to_linkable.linking_id = l.id
      Proc.new do |l|
    to_links.map do |l|
to_links.map{ |l| Proc.new { |l| l.to_linkable.linking_id = l.id } }
to_links.map{ |l| Proc.new { |l| l.to_linkable.linking_id = l.id return l.to_linkable } }
to_links.map{ |l| Proc.new { |l| l.to_linkable.linking_id = l.id; return l.to_linkable } }
to_links.map{ |l| Proc.new l.to_linkable.linking_id = l.id }
to_links.map{ |l| l.to_linkable.linking_id = l.id }
to_links.map{ |l| l.to_linkable.assign_attributes(linking_id: 1) }
l.id
to_links.map{ |l| l.to_linkable.assign_attributes(linking_id: l.id) }
to_links.map{ |l| l.to_linkable.update(linking_id = l.id) }
to_links.map{ |l| l.to_linkable.set_attributes(linking_id = l.id) }
to_links.map{ |l| l.to_linkable.attributes(linking_id = l.id) }
to_links.map{ |l| l.to_linkable(linking_id = l.id) }
to_links.map{ |l| l.to_linkable << l.to_linkable.linking_id = l.id }
to_links.map{ |l| l.to_linkable + l.to_linkable.linking_id = l.id }
to_links.map{ |l| l.to_linkable.merge(l.to_linkable.linking_id = l.id) }
to_links.map{ |l| l.to_linkable.merge(l.to_linkable.linkin_id = l.id) }
aray = to_links.map{ |l| l.to_linkable.linking_id = l.id; return l.to_linkable }
aray = to_links.map{ |l| l.to_linkable.linking_id = l.id, l.to_linkable }
aray = to_links.map{ |l| l.to_linkable.linking_id = l.id; l.to_linkable }
array_of_linkables.first.linking_id = 1
array_of_linkables.first.linkable_id = 1
array_of_linkables = to_links.map{ |l| l.to_linkable }
exit
array_of_linkables.first.linkable_id = 1
array_of_linkables.first
array_of_linkables = to_links.map{ |l| l.to_linkable }
to_links.map{ |l| l }
to_links.map{ |l| l.to_linkable }
to_links
exit
element
exit
params[:action]
params
continue
@article.author
@article
continue
@article.author_name
@article.author
@article
continue
@article.author
@article
continue
@aktion.existing_links
continue
picturizing
picutizing
picturizing = item.picturizings.size > 0 && item.picturizings.select { |p| p.for_card == "true" }
continue
self.model_name.name
self.model_name
self.model
self.class.name
self.class
continue
@site_editorial.errors
continue
@site_editorial.errors
continue
@site_editorial.errors
continue
@site_editorial.errors
continue
@site_editorial.errors
s.errors
continue
self.status != "featured"
site_editorial.status != "featured"
self.translation.status_was == "featured"
site_editorial.translation.status_was == "featured"
SiteEditorial.find(1).status
SiteEditorial.find(1)
self.status
self
site_editorial
continue
next
self.status
self
status
continue
site_editorial.translation.status_was == "featured" && site_editorial.status != "featured"
site_editorial.status != "featured"
site_editorial.translation.status_was == "featured"
continue
site_editorial.translation.status_was
site_editorial
continue
translation.status
translation
site_editorial
continue
