continue
applicable_existing_categories
continue
new_md
picture_title
:applicable_existing_categories
portrait_params
continue
portrait_params
continue
self.applicable_existing_categories
params
new_category_name
main_category_id
applicable_existing_categories
object
self
@portrait
continue
applicable_existing_categories.except!(main_category_id)
main_category_id
applicable_existing_categories
continue
main_category_id.present?
main_category_id == "new_category"
new_category_name
main_category_id
applicable_existing_categories
item_type
item
continue
applicable_existing_categories
type
continue
item
type
continue
type
continue
type
continue
item_type
item
main_category_id
applicable_existing_categories
main_category_id
new_category_name
continue
new_category_name
main_category_id
applicable_existing_categories
item
item_type
continue
item_type
continue
new_category_name
main_category_id
applicable_existing_categories
item
item_type
continue
applicable_existing_categories
continue
cat
chosen_category_ids.include?(kateg.id)
kateg.id
kateg
chosen_category_ids
continue
cat
chosen_category_ids
continue
@categories_for_side_nav.map(&:id)
@categories_for_side_nav
@article.categories.map(&:name)
@article.categories
chosen_category_ids
continue
collection_select(:aktion, :country_id, @countries, :id, :name, {}, {class: "form-control"})
:aktion
continue
@countries
continue
@countries = Country.includes(:translations).all
continue
@countries
continue
@countries
continue
step
@countries = Country.includes(:translations).all
continue
@countries
continue
@countries
continue
step
params[:portrait][:new_md][:file].class
exit
params[:portrait][:new_md][:file].class
params[:portrait][:new_md][:file]
params[:portrait][:new_md]
exit
params[:portrait][:new_md]
params[:portrait][2]
params[:portrait][1]
params[:portrait].second
params[:portrait].first
params[:portrait]
continue
items
continue
element.picturizings[0].media_container.title
element.picturizings[0].media_container.media(:for_card)
element.picturizings[0].media_container.media
element.picturizings[0].media_container
element.picturizings[0]
element.picturizings
element
continue
next
exit
md_for_carousel
id = for_card.sub(/new_md_/, '')
for_card.sub(/new_md_/, '')
(for_card.sub(/new_md_/, '') != for_card && )
id
id = for_card.sub(/new_md_/, '') != for_card
for_card.sub(/new_md_/, '') != for_card
for_card.sub(/new_md_/, '') == for_card
for_card.sub(/new_md_/, '') != for_card
for_card.sub(/new_md_/, '')
new_md.each {|md| p md[1]}
new_md.each {|k, v| p v}
new_md.each {|k, v| p k}
new_md.each {|md| p md[0]}
new_md.each {|md| p md[3]}
new_md.each {|md| p md[2]}
new_md.each {|md| p md[1]}
new_md.each {|md| p md[0]}
new_md.each {|md| p md}
new_md
for_card.sub(/new_md_/, '') != for_card
for_card.sub(/new_md_/) != for_card
for_card.sub(/new_md_/, '')
for_card.sub(/new_card_/, '')
for_card.sub(/new_card_/)
for_card
continue
pics_ids = @article.picturizings.select{|p| md_for_carousel.keys.include?(p.id.to_s)}.map {|p| p.id}
pics_ids = @article.picturizings.select{|p| md_for_carousel.keys.include?(p.media_container_id.to_s)}.map {|p| p.id}
md_for_carousel.keys.include?(p.media_container_id.to_s)}
md_for_carousel.keys
continue
p "coucou" if md_for_carousel
if md_for_carousel {p "coucou"}
if md_for_carousel p "coucou" end
md_for_carousel == true
md_for_carousel.true?
md_for_carousel
continue
md_for_carousel
continue
pict_id
continue
md_for_carousel
continue
next
pict_id
continue
exit
for_card.sub(/existing_card_/, '')
pict_id
continue
exit
for_card.sub(/existing_md_/, '') != for_card
for_card.sub(/existing_md_/, '')
for_card.sub(/existing_card_/, '')
for_card
for_Card
for_card.sub(/existing_card_/, '') != for_card
pict_id
continue
md_to_update
exit
for_card.sub(/existi_md_/, '') != for_card
for_card.sub(/existi_md_/, '')
for_card.sub(/existing_md_/, '')
for_card.sub(/existing_md_/)
for_card.match(/existing_md_/)
for_card.match(/existing_md/)
for_card
md_to_update
continue
next
picturizing_for_card.id
picturizing_for_card
next
continue
picturizing_for_card[0].id
picturizing_for_card[0].picturizable_id
picturizing_for_card.picturizable_id
picturizing_for_card['id']
picturizing_for_card[id]
picturizing_for_card
picturizing_for_card.id
picturizing_for_card = @article.picturizings.select{|p| p.media_container_id == md_for_card.keys[0].to_i}
Picturizing::Translation.where(picturizing_id: @article.picturizings.ids).update_all(for_card: "false")
continue
next
continue
next
pics_ids
next
step
exit
ps_ids = @article.picturizings.select{|p| md_for_carousel.keys.include?(p.media_container_id.to_s)}.map {|p| p.id}
ps
ps = @article.picturizings.select{|p| md_for_carousel.keys.include?(p.media_container_id.to_s)}
@article.picturizings.select{|p| md_for_carousel.keys.include?(p.media_container_id.to_s)}
exit
md_for_carousel
md_for_carousel.keys
continue
@media_containers
continue
MediaContainer.find([1,2])
MediaContainer.last.media(:for_carousel)
MediaContainer.last.media
MediaContainer.last
@media_containers.each {|md| p md.media(:styles)}
@media_containers.each {|md| p md.media(:default_url)}
@media_containers.each {|md| p md.media(:url)}
@media_containers.each {|md| p md.media.url}
@media_containers.each {|md| p md.media(:name)}
@media_containers.each {|md| p md.media[:name]}
@media_containers.each {|md| p md.media[@name]}
@media_containers.each {|md| p md.media(:for_slider)}
@media_containers.each {|md| p md.media}
@media_containers.each {|md| p md.title}
continue
MediaContainer.find(1)
MediaContainer.find(15)
MediaContainer.find(14)
@media_containers.each {|md| p md.title}
@media_containers
continue
md_for_carousel[picturizing.media_container_id.to_s]
picturizing.update(for_carousel: md_for_carousel[picturizing.media_container_id.to_s])
md_for_carousel.keys.include?(picturizing.media_container_id.to_s)
md_for_carousel
picturizing
picturing
step
md_for_carousel
